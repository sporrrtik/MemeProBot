import config
import logging
# import Cats
# import Itmo
import markups as nav

from aiogram import Bot, Dispatcher, executor, types


# –í—Å–µ–ª–µ–Ω–Ω–∞—è
class World:
    def get_dict(self):
        return dict([('üòÇ', "01"), ('ü•µ', "02"), ('üò°', "03"), ('üò∞', "04"), ('ü•∫', "05")])


# –∫–æ—Ç–∏–∫–∏
class Cats:
    def get_dict(self):
        return dict([('üòÇ', 'aiogram_pictures/cat_1.jpg'), ('ü•µ', 'aiogram_pictures/cat_2.jpg'), ('üò°', 'aiogram_pictures/cat_3.jpg'), ('üò∞', 'aiogram_pictures/cat_4.jpg'), ('ü•∫', 'aiogram_pictures/cat_5.jpg')])

#ITMO
class Itmo:
    def get_dict(self):
        return dict([('üòÇ', 21), ('ü•µ', 22), ('üò°', 23), ('üò∞', 24), ('ü•∫', 25)])


# log level
logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)
world = World()
x = 0

# voice delete
#   @dp.message_handler(content_types=[""])

# welcome
@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–û–π, —Ç—ã –ø–æ—Ö–æ–∂–µ –Ω–æ–≤–µ–Ω—å–∫–∏–π... –ù—É –ø—Ä–∏—Å–∞–∂–∏–≤–∞–π—Å—è, –¥–ª—è —Ç–µ–±—è –≤—Å–µ–≥–¥–∞ –º–µ—Å—Ç–æ –Ω–∞–π–¥—ë—Ç—Å—è." + 'üòâ\n' + "–í –æ–±—â–µ–º —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–µ–Ω—è–µ—Ç " +
        "—Ç–≤–æ–∏ —Å–º–∞–π–ª–∏–∫–∏ –Ω–∞ —á—Ç–æ-—Ç–æ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ " + 'üòö\n' + "–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ç–µ–º—É, –∞ –∑–∞—Ç–µ–º —Å–º–∞–π–ª–∏–∫", reply_markup= nav.worldMenu)


# echo
@dp.message_handler()
async def echo(message: types.Message):
    global world
    global x

    if x == 0:
        if "–∫–æ—Ç" in message.text.lower():
            world = Cats()
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞ –º–∞–ª—ã–º, –≤—ã–±–∏—Ä–∞–π —Å–º–∞–π–ª–∏–∫", reply_markup=nav.emojiMenu)
            x = 1
        elif "–∏—Ç–º–æ" in message.text.lower():
            world = Itmo()
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –û—Å—Ç–∞–ª–æ—Å—å –∑–∞ –º–∞–ª—ã–º, –≤—ã–±–∏—Ä–∞–π —Å–º–∞–π–ª–∏–∫", reply_markup=nav.emojiMenu)
            x = 1
        else:
            await message.answer("–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –ª—É—á—à–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –≤—ã–±–∏—Ä–∞—Ç—å –≤—Å–µ–ª–µ–Ω–Ω—É—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤ –º–µ–Ω—é—à–∫–µ üòâ", reply_markup=nav.worldMenu)
        return

    if x == 1:
        if 'üòÇ' in message.text:
            media = types.MediaGroup()
            media.attach_photo(types.InputFile(world.get_dict()['üòÇ']))
            await message.answer_media_group(media=media)
        elif 'ü•µ' in message.text:
            media = types.MediaGroup()
            media.attach_photo(types.InputFile(world.get_dict()['ü•µ']))
            await message.answer_media_group(media=media)
        elif 'üò°' in message.text:
            media = types.MediaGroup()
            media.attach_photo(types.InputFile(world.get_dict()['üò°']))
            await message.answer_media_group(media=media)
        elif 'üò∞' in message.text:
            media = types.MediaGroup()
            media.attach_photo(types.InputFile(world.get_dict()['üò∞']))
            await message.answer_media_group(media=media)
        elif 'ü•∫' in message.text:
            media = types.MediaGroup()
            media.attach_photo(types.InputFile(world.get_dict()['ü•∫']))
            await message.answer_media_group(media=media)
        elif "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ–ª–µ–Ω–Ω—É—é" in message.text:
            await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –≤—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë", reply_markup=nav.worldMenu)
            x = 0
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏, –ø–æ—Ö–æ–∂–µ —É –º–µ–Ω—è –Ω–∏—á–µ–≥–æ –Ω–µ—Ç —Å —ç—Ç–∏–º —Å–º–∞–π–ª–∏–∫–æ–º üòî. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞, –Ω–æ –ø—Ä–∏—Å—ã–ª–∞–π —á–µ—Ä–µ–∑ –º–µ–Ω—é", reply_markup=nav.emojiMenu)




# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
